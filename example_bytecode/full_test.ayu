# End result should be: [0, *, 2, 3, 4, 5, 1, 1, 8, 4, FF80, FF0, C, D, E, F]
# Initial jump
9 1 0 5

# Data
000C
0000
0000
0000


# Add
9 2 0 1
9 3 0 1
0 2 2 3 # r2 = r2 + r3 (r2 = 2)

# Subtract
9 3 F F
9 4 F C
1 3 3 4 # r3 = r3 - r4 (r3 = 3)

# And
9 4 0 F
9 5 F 4
2 4 4 5 # r4 = r4 & r5 (r4 = 4)

# Or
9 5 0 1
9 6 0 4
3 5 5 6 # r5 = r5 | r6 (r5 = 5)

# SetIfLess
4 6 5 6 # r6 = r5 < r6 (r6 = 1)

# SetIfEqual
5 7 6 6 # r7 = r6 == r6 (r7 = 1)

# ShiftLeft
6 8 4 6 # r8 = r4 << r6 (r8 = 8)

# ShiftRightLogical
7 9 8 6 # r9 = r8 >> r6 (r9 = 4)

# ShiftRightArithmetic
9 A 0 0
A A F F # rA = FF00
8 A A 7 # rA = rA >>> r6 (rA = FF80)

# Set upper and lower
9 B F 0
A B F 0 # rB = F0F0

# LoadWord
B C 0 1 # rC = second word in memory (rC = C)

# SaveWord
9 D 0 D
C D 0 3 # 4th word in memory = rB (= D)
B D 0 3 # rD = D

# SetPcIf
9 F 2 1
D F 0 0 # pc = rF if 0 = 0 (jump to 0x0020)
9 1 2 3
9 E 0 E # rE = E if jump occurs, otherwise rE = 0

# SetPcIfNot
9 F 2 5
E F 0 0 # pc = rD if 0 != 0 (do not jump)
9 F 0 F # rF = F if jump doesn't occur, otherwise rF = 0

9 F 0 0
# Terminate
F 1 0 0